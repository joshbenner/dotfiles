- name: Playbook deps
  hosts: local
  tasks:
    - name: Set system python
      set_fact:
        system_python: /bin/python
        system_pip: /bin/pip
        _python_pkgs: [python-pip, python-apt]

    - name: Set system python for newer Ubuntu
      set_fact:
        ansible_python_interpreter: /usr/bin/python3
        system_python: /usr/bin/python3
        system_pip: /usr/bin/pip3
        _python_pkgs: [python3-pip, python3-apt]
      when:
        - ansible_distribution in ('Ubuntu', 'Pop!_OS')
        - ansible_distribution_version is version('20.04', '>=')

    - name: Install playbook deps via APT
      when: ansible_os_family == 'Debian'
      become: true
      apt:
        name: "{{ _python_pkgs + ['wget', 'unzip', 'fontconfig'] }}"
        state: present

- import_playbook: common.yml

- name: Linux-specific stuff
  hosts: local
  handlers:
    - name: refresh font cache
      command: fc-cache -f -v
  tasks:
    - name: Create fonts dir
      tags: [fonts]
      file: path={{ item }} state=directory
      loop:
        - "{{ home_dir }}/.local"
        - "{{ home_dir }}/.local/share"
        - "{{ home_dir }}/.local/share/fonts"

    - name: Install fonts
      tags: [fonts]
      copy:
        src: "{{ item }}"
        dest: "{{ home_dir }}/.local/share/fonts"
      with_fileglob: fonts/*.ttf
      notify: refresh font cache

    - name: Install packages to support pbcopy/pbpaste
      become: true
      package:
        name: [xclip, xsel]
        state: present
      when: ansible_os_family == 'Debian'

- name: Pop!_OS-specific stuff
  hosts: local
  vars:
    remote_debs:
      input-remapper: https://github.com/sezanzeb/input-remapper/releases/download/2.0.1/input-remapper-2.0.1.deb
    extra_repos:
      - name: brave-browser
        key: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
        repo: https://brave-browser-apt-release.s3.brave.com
        suites: stable
        components: [main]
      - name: vscode
        key: https://packages.microsoft.com/keys/microsoft.asc
        repo: https://packages.microsoft.com/repos/code
        suites: stable
        components: [main]
      - name: sublime-text
        key: https://download.sublimetext.com/sublimehq-pub.gpg
        repo: https://download.sublimetext.com/
        suites: apt/stable/
      - name: ulauncher
        key: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x59ebde772980c381ca13fa59faf1020699503176
        repo: https://ppa.launchpadcontent.net/agornostal/ulauncher/ubuntu
        suites: "{{ ansible_distribution_release }}"
        components: [main]
  tasks:
    - name: End play if not on Pop!_OS
      ansible.builtin.meta: end_play
      when: ansible_distribution != "Pop!_OS"

    - name: Setup extra repos
      become: true
      ansible.builtin.deb822_repository:
        name: "{{ repo.name }}"
        uris: "{{ repo.repo }}"
        signed_by: "{{ repo.key | d(omit) }}"
        suites: "{{ repo.suites }}"
        components: "{{ repo.components | d(omit) }}"
        state: present
        enabled: true
      loop: "{{ extra_repos }}"
      loop_control:
        loop_var: repo
        label: "{{ repo.name }}"
      register: repo_task

    - name: Install Debian packages
      become: true
      ansible.builtin.apt:
        update_cache: "{{ repo_task is changed }}"
        name:
          - dconf-editor
          - brave-browser
          - code
          - input-remapper
          - sublime-text
          - tilix
          - gnome-tweaks
          - ulauncher

    - name: Install flatpaks
      community.general.flatpak:
        name: "{{ pak }}"
        method: user
        state: present
      loop:
        - com.spotify.Client
        - com.github.tchx84.Flatseal
        - org.zealdocs.Zeal
        - com.mattjakeman.ExtensionManager
        - com.discordapp.Discord
        - org.wireshark.Wireshark
      loop_control:
        loop_var: pak

    - name: Download remote deb packages
      ansible.builtin.get_url:
        url: "{{ item.value }}"
        dest: fetch/{{ item.key }}.deb
        owner: "{{ ansible_real_user_id }}"
        group: "{{ ansible_real_group_id }}"
        mode: u=rw,g=r,o=r
      loop: "{{ remote_debs | dict2items }}"

    - name: Install downloaded deb files
      become: true
      ansible.builtin.apt:
        deb: fetch/{{ item }}.deb
      loop: "{{ remote_debs.keys() }}"
