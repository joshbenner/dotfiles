#+TITLE: Emacs Configuration
#+STARTUP: indent

* General App Config
** Disable startup screen
#+name: startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen +1)
#+END_SRC
** Disable ctrl-z
#+name: startup
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
** Bar cursor
#+name: startup
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
** Hide tool bar in X interface
#+name: startup
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** Font
#+name: startup
#+BEGIN_SRC emacs-lisp
  (push '(font . "DejaVu Sans Mono-10") default-frame-alist)
#+END_SRC
** Stop the backup file madness
Backups to .emacs.d subfolder.
#+name: startup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
  (setq backup-by-copying t)
#+END_SRC

Put autosave files in temporary directory.
#+name: startup
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** No scrollbar
#+name: startup
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** Powerline
Pretty mode line.
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init (powerline-default-theme))
  #+END_SRC
** Helm
Completion framework used when looking for stuff in a lot of places in Emacs.
#+name: interface
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-b" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           ("C-x C-r" . helm-recentf)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop))
    :config (progn
              (require 'helm-config)
              (helm-mode 1)
              (add-hook 'eshell-mode-hook
                        (lambda ()
                          (define-key eshell-mode-map (kbd "TAB") 'helm-esh-pcomplete)
                          (define-key eshell-mode-map (kbd "C-c C-l") 'helm-eshell-history)))))
#+END_SRC
** Projectile
Project management.
#+name: interface
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :defer t)

  (use-package projectile
    :ensure t
    :config (progn (setq projectile-mode-line
                         '(:eval (format " [%s]" (projectile-project-name))))
                   (require 'helm-projectile)
                   (helm-projectile-on)
                   (projectile-global-mode)))
#+END_SRC
** Workgroups
Save sessions so you don't have to reopen files.
#+name: session
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :ensure t
    :init (workgroups-mode 1))
#+END_SRC
** Window moving
Global keys.
#+name: interface
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
  (global-set-key (kbd "<C-M-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-M-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-M-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-M-S-right>")  'buf-move-right)
#+END_SRC

Org-mode keys (hides C-S-<arrow> default bindings)
#+name: interface-disabled
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
     (local-set-key [C-S-up]    'buf-move-up)
     (local-set-key [C-S-down]  'buf-move-down)
     (local-set-key [C-S-left]  'buf-move-left)
     (local-set-key [C-S-right] 'buf-move-right)))
#+END_SRC
** Window switching
#+name: interface
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :init (global-set-key (kbd "C-x o") 'switch-window))
#+END_SRC
** Auto-load elisp files
Any elisp files in =~/.emacs.local.d/= will be auto-loaded.
#+name: autoload
#+BEGIN_SRC emacs-lisp
  (defun my/load-elisp-directory (path)
    (let ((file-pattern "\\.elc?$"))
      (when (file-directory-p path)
        (mapcar (lambda (lisp-file)
                  (load-file lisp-file))
                (directory-files (expand-file-name path) t file-pattern)))))

  (my/load-elisp-directory "~/.emacs.local.d")
#+END_SRC
* Display Tweaks
** Show curly arrows when wrapping a line
From: http://www.emacswiki.org/emacs/VisualLineMode
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC
** When using visual line mode, use better indenting too
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (use-package adaptive-wrap
    :ensure t)
  (setq adaptive-wrap-extra-indent 2)

  (add-hook 'visual-line-mode-hook
    (lambda ()
      (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1))
      (diminish 'visual-line-mode)))
#+END_SRC
** Use Visual Line Mode for text modes
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Org mode config
** Enable shift-selection
Org mode uses S-<arrow> to move things like TODO lines through
states. This conflicts with Emacs' default of letting S-<arrow> start
or expand marked regions. Turning on org support of shift select means
that it will try to compromise and do selection when nothing else
makes sense, and also allow it when a mark is already set.

Unless we set it to 'always, in which case it doesn't compromise, and
just gives up on S-<arrow>.

#+name: behavior
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select 'always)
#+END_SRC
** Use Visual Line Mode for org mode
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
** Dates when todo is done
#+name: behavior
#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
#+END_SRC
** Use indented mode
This only shows one star on each heading line, and handles the indentation for you. Little cleaner.
#+name: look-and-feel
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Stop inserting blank lines around headings
#+name: behavior
#+BEGIN_SRC emacs-lisp
  ;(setq org-blank-before-new-entry nil)
#+END_SRC
** Download images dragged over buffer
#+name: behavior
#+BEGIN_SRC emacs-lisp
  (use-package org-download :ensure t)
#+END_SRC
** Capture
*** Default Directory
Set a default org directory because we need one... but local environment should set in its .emacs.local.d.
#+name: startup
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
#+END_SRC
*** Templates
#+name: behavior
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file+headline "" "Tasks")
         "* TODO %?\n  %u\n  %a")
        ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        )
      )
#+END_SRC
** Agenda Configuration
#+name: interface
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday 0)
  (global-set-key "\C-ca" 'org-agenda)
  (setq org-agenda-todo-ignore-scheduled t)
  (setq org-agenda-todo-ignore-deadlines t)
#+END_SRC
** Publish
#+name: behavior
#+BEGIN_SRC emacs-lisp
  ;; Use HTML5 elements.
  (setq org-html-html5-fancy t)

  ;; Ignore timestamps and publish when I say!
  (setq org-publish-use-timestamps-flag nil)

  ;; Default publish style to solarized light.
  (setq org-html-head "<link rel='stylesheet' type='text/css' href='http://thomasf.github.io/solarized-css/solarized-light.min.css' />")
#+END_SRC
** HTMLize
#+name: behavior
#+BEGIN_SRC emacs-lisp
  ;(use-package htmlize
  ;  :ensure t
  ;  :defer t
  ;  :commands (htmlize-region htmlize-buffer htmlize-file))
#+END_SRC
* Editing
** Parens
#+name: behavior
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (use-package smartparens
    :ensure t)
#+END_SRC
** Replace selected text on typing
#+name: behavior
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
** Unfill paragraphs
For the time when you want that paragraph in one line.
From: http://www.emacswiki.org/emacs-test/UnfillParagraph
#+name: behavior
#+BEGIN_SRC emacs-lisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))

  (define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC
* Languages
** PHP
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?$")

  (use-package php-mode
    :ensure t
    :mode (("\\.php$" . php-mode)
           ("\\.inc$" . php-mode))
    :config (add-hook 'php-mode-hook (lambda ()
                                       "Customize PHP indentation"
                                       (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist)
                                       (c-set-offset 'substatement-open 0)
                                       (c-set-offset 'case-label '+))))
#+END_SRC
** Python
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :mode "\.py$")
#+END_SRC
** YAML
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\.yml$")
#+END_SRC
** Fish Shell
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :ensure t
    :mode "\.fish$")
#+END_SRC
** Haskell
Strongly typed, pure functional language.
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\.hs$")

  (use-package hi2
    :ensure t
    :commands turn-on-hi2
    :init (add-hook 'haskell-mode-hook 'turn-on-hi2))
#+END_SRC
** Erlang
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package erlang
    :ensure t
    :mode ("\.[eh]rl$" . erlang-mode)
    :config (add-hook 'erlang-mode-hook
                      (lambda ()
                        (setq inferior-erlang-machine-options '("-sname" "emacs"
                                                                "-hidden")))))
#+END_SRC
** JSON
#+name: programming
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode ("\.json$" . json-mode))
#+END_SRC
** Markdown
Human-compatible, plain-text markup language.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md$")
#+END_SRC
* Config Layout
This imports code from the named blocks above. This is done so that some things happen in a specific order (such as defining hooks before reloading buffers).
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
  ;;;; Do not modify this file by hand.  It was automatically generated
  ;;;; from `emacs.org` in the same directory. See that file for more
  ;;;; information.
  ;;;;

  <<startup>>
  <<look-and-feel>>
  <<interface>>
  <<behavior>>
  <<programming>>
  <<autoload>>
  <<session>>
#+END_SRC
