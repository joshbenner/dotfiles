#+TITLE: Emacs Configuration
#+STARTUP: indent

* General App Config
** Disable startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen +1)
#+END_SRC
** Disable ctrl-z
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
** Bar cursor
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
** Hide tool bar in X interface
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (push '(font . "DejaVu Sans Mono-10") default-frame-alist)
#+END_SRC
** Stop the backup file madness
Backups to .emacs.d subfolder.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
  (setq backup-by-copying t)
#+END_SRC

Put autosave files in temporary directory.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** No scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
** Powerline
Pretty mode line.
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init (powerline-default-theme))
  #+END_SRC
** Helm
Completion framework used when looking for stuff in a lot of places in Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-b" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           ("C-x C-r" . helm-recentf)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop))
    :config (progn
              (require 'helm-config)
              (helm-mode 1)
              (add-hook 'eshell-mode-hook
                        (lambda ()
                          (define-key eshell-mode-map (kbd "TAB") 'helm-esh-pcomplete)
                          (define-key eshell-mode-map (kbd "C-c C-l") 'helm-eshell-history)))))
#+END_SRC
** Projectile
Project management.
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :defer t)

  (use-package projectile
    :ensure t
    :config (progn (setq projectile-mode-line
                         '(:eval (format " [%s]" (projectile-project-name))))
                   (require 'helm-projectile)
                   (helm-projectile-on)
                   (projectile-global-mode)))
#+END_SRC
** Workgroups
Save sessions so you don't have to reopen files.
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
    :ensure t
    :init (workgroups-mode 1))
#+END_SRC
** Window moving
Global keys.
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+END_SRC

Org-mode keys (hides C-S-<arrow> default bindings)
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda ()
     (local-set-key [C-S-up]    'buf-move-up)
     (local-set-key [C-S-down]  'buf-move-down)
     (local-set-key [C-S-left]  'buf-move-left)
     (local-set-key [C-S-right] 'buf-move-right)))
#+END_SRC
** Window switching
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :init (global-set-key (kbd "C-x o") 'switch-window))
#+END_SRC
** Auto-load elisp files
Any elisp files in =~/.emacs.local.d/= will be auto-loaded.
#+BEGIN_SRC emacs-lisp
  (defun my/load-elisp-directory (path)
    (let ((file-pattern "\\.elc?$"))
      (when (file-directory-p path)
        (mapcar (lambda (lisp-file)
                  (load-file lisp-file))
                (directory-files (expand-file-name path) t file-pattern)))))

  (my/load-elisp-directory "~/.emacs.local.d")
#+END_SRC
* Display Tweaks
** Show curly arrows when wrapping a line
From: http://www.emacswiki.org/emacs/VisualLineMode
#+BEGIN_SRC emacs-lisp
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC
** When using visual line mode, use better indenting too
#+BEGIN_SRC emacs-lisp
  (use-package adaptive-wrap
    :ensure t)
  (setq adaptive-wrap-extra-indent 2)

  (add-hook 'visual-line-mode-hook
    (lambda ()
      (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1))
      (diminish 'visual-line-mode)))
#+END_SRC
** Use Visual Line Mode for text modes
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Org mode config
** Use Visual Line Mode for org mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
** Dates when todo is done
#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
#+END_SRC
** Use indented mode
This only shows one star on each heading line, and handles the indentation for you. Little cleaner.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Stop inserting blank lines around headings
#+BEGIN_SRC emacs-lisp
  (setq org-blank-before-new-entry nil)
#+END_SRC
** Download images dragged over buffer
#+BEGIN_SRC emacs-lisp
  (use-package org-download :ensure t)
#+END_SRC
** Capture
*** Default Directory
Set a default org directory because we need one... but local environment should set in its .emacs.local.d.
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org")
#+END_SRC
*** Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      `(("t" "Task" entry (file+headline "" "Tasks")
         "* TODO %?\n  %u\n  %a")
        ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
         "* %?\nEntered on %U\n  %i\n  %a")
        )
      )
#+END_SRC
* Editing
** Parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (use-package smartparens
    :ensure t)
#+END_SRC
** Replace selected text on typing
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
* Languages
** PHP
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?$")

  (use-package php-mode
    :ensure t
    :mode (("\\.php$" . php-mode)
           ("\\.inc$" . php-mode))
    :config (add-hook 'php-mode-hook (lambda ()
                                       "Customize PHP indentation"
                                       (c-set-offset 'arglist-cont-nonempty 'c-lineup-arglist)
                                       (c-set-offset 'substatement-open 0)
                                       (c-set-offset 'case-label '+))))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :mode "\.py$")
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\.yml$")
#+END_SRC
** Fish Shell
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode
    :ensure t
    :mode "\.fish$")
#+END_SRC
** Erlang
#+BEGIN_SRC emacs-lisp
  (use-package erlang
    :ensure t
    :mode ("\.[eh]rl$" . erlang-mode)
    :config (add-hook 'erlang-mode-hook
                      (lambda ()
                        (setq inferior-erlang-machine-options '("-sname" "emacs"
                                                                "-hidden")))))
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode ("\.json$" . json-mode))
#+END_SRC

#+RESULTS:

* Publish
** HTMLize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :defer t
    :commands (htmlize-region htmlize-buffer htmlize-file))
#+END_SRC
