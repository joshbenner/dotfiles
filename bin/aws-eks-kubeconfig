#!/bin/bash

kubeconfig="$(mktemp)"

e="$(printf '\033')"
boldcyan="$e[1;36m"
resetcolor="$e[0m"

function stderr { printf "%s\n" "$*" >&2; }
function cleanup { [ -e "$kubeconfig" ] && rm "$kubeconfig"; }
trap cleanup EXIT

stderr "Tempfile: $kubeconfig"

for profile in $(aws configure list-profiles); do
    stderr "Profile: $profile"
    account=$(aws configure get sso_account_id --profile $profile)
    if [ -z "$account" ]; then
        account=$(aws sts get-caller-identity --query Account --output text --profile $profile)
    fi
    if [ -z "$account" ]; then
        stderr "Cannot find account ID"
        exit 1
    fi
    stderr "  Account: $account"

    all_roles=$(aws iam list-roles --profile $profile)
    view_role=$(echo "$all_roles" | jq -r '.Roles[] | select(.Arn | test("cluster-view")) | .Arn')
    admin_role=$(echo "$all_roles" | jq -r '.Roles[] | select(.Arn | test("cluster-admin")) | .Arn')
    stderr "  View role: $view_role"
    stderr "  Admin role: $admin_role"

    for cluster_id in $(aws eks list-clusters --profile $profile | jq '.clusters[]' -r); do
        context=$(echo "$cluster_id" | sed -r 's/(-us-.*)?-eksCluster-.*//')
        context=$(echo "$context" | sed -r 's/^(ip|eks)-//')
        context=$(echo "$context" | sed -r 's/validation/val/')
        context=$(echo "$context" | sed -r 's/non-prod/dev/')
        context=$(echo "$context" | sed -r 's/0([0-9])/\1/')
        context=$(echo "$context" | sed -r 's/(qa|prod|qa-val)-1/\1/')
        context=$(echo "$context" | sed -r 's/dev-new-2/dev/')
        stderr "  Cluster: $boldcyan$context$resetcolor ($cluster_id)"
        stderr "  Role: $role"
        aws eks update-kubeconfig \
            --profile $profile \
            --alias $context \
            --name $cluster_id \
            --role-arn $view_role \
            --kubeconfig "$kubeconfig" >&2
        aws eks update-kubeconfig \
            --profile $profile \
            --alias $context-admin \
            --name $cluster_id \
            --role-arn $admin_role \
            --kubeconfig "$kubeconfig" >&2
    done
done

cat "$kubeconfig"
